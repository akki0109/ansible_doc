It's best practice to keep sensitive information, such as access tokens, in a secure and separate location.
You can use Ansible's vault feature to encrypt and store sensitive data securely.
To use Ansible vault, you can create an encrypted file that stores your access token, 
and then reference that encrypted file in your playbook. Here's an example:


----------Create an encrypted file to store the access token. Run the following command and provide a password when prompted:----------------------

ansible-vault create secrets.yml

---------------------------------------------now put below content in it (in place of   YOUR_GIT_ACCESS_TOKEN  put your acces token )
vault_git_access_token: YOUR_GIT_ACCESS_TOKEN

-----------------------here is playbook you need make some changes------------------------------------------------------------------

---
- name: Deploy .NET website on Amazon Linux with Apache
  hosts: all
  become: true
  vars:
    app_name: "helloapp"
    app_publish_dir: "/var/www/{{ app_name }}"
    app_git_repo: "https://{{ vault_data.vault_git_access_token }}@github.com/akki0109/helloapp.git"
    ansible_user: ec2-user
  tasks:
    - name: Load vault token
      include_vars:
        file: "/home/ubuntu/secrets.yml"
        name: vault_data

    - name: Install .NET SDK
      yum:
        name: dotnet-sdk-6.0
        state: present

    - name: Install ASP.NET Core runtime
      yum:
        name: aspnetcore-runtime-6.0
        state: present

    - name: Install .NET runtime
      yum:
        name: dotnet-runtime-6.0
        state: present

    - name: Install Apache web server
      yum:
        name: httpd
        state: present

    - name: Install Git
      yum:
        name: git
        state: present

    - name: Start Apache service
      service:
        name: httpd
        state: started
        enabled: true

    - name: Clone or update the application repository
      git:
        repo: "{{ app_git_repo }}"
        dest: "{{ app_publish_dir }}"
        version: main  # Replace "main" with the branch name that exists in your repository
        update: yes
        accept_hostkey: yes

    - name: Set permissions for the application directory
      file:
        path: "{{ app_publish_dir }}"
        owner: apache
        group: apache
        recurse: yes
        state: directory
        mode: "2775"

    - name: Set permissions for directories
      file:
        path: "{{ app_publish_dir }}"
        owner: apache
        group: apache
        recurse: yes
        state: directory
        mode: "2775"

    - name: Set permissions for files
      find:
        paths: "{{ app_publish_dir }}"
        file_type: file
        recurse: yes
      register: files_to_set_permissions

    - name: Set permissions for files
      file:
        path: "{{ item.path }}"
        owner: apache
        group: apache
        mode: "0664"
      loop: "{{ files_to_set_permissions.files }}"

    - name: Configure Apache for the application
      template:
        src: templates/apache-site.conf.j2
        dest: /etc/httpd/conf.d/{{ app_name }}.conf

    - name: Restart Apache service
      service:
        name: httpd
        state: restarted

    - name: Configure Kestrel for the application
      template:
        src: templates/kestrel-service.conf.j2
        dest: /etc/systemd/system/kestrel-{{ app_name }}.service

    - name: Enable Kestrel service
      command: systemctl start kestrel-{{ app_name }}.service
      become: true




----------------------------------------inside template folder create a file name (  apache-site.conf.j2  )  and put below content------------------




<VirtualHost *:*>
    RequestHeader set "X-Forwarded-Proto" expr=%{REQUEST_SCHEME}s
</VirtualHost>

<VirtualHost *:80>
    ProxyPreserveHost On
    ProxyPass / http://127.0.0.1:5000/
    ProxyPassReverse / http://127.0.0.1:5000/
    ServerName {{ app_name }}
    ServerAlias *.{{ app_name }}
</VirtualHost>






----------------------------------now after making changes create folder templates in root where playbook is 
kept and inside it create a jinja file named ( kestrel-service.conf.j2) and put below content----------------------------------------------------


[Unit]
Description={{ app_name }} .NET application

[Service]
WorkingDirectory={{ app_publish_dir }}/app
ExecStart=/usr/bin/dotnet {{ app_publish_dir }}/app/YourAppName.dll
Restart=always
# Restart service after 10 seconds if the dotnet service crashes:
RestartSec=10
SyslogIdentifier={{ app_name }}
User=www-data
Environment=ASPNETCORE_ENVIRONMENT=Production
Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false

[Install]
WantedBy=multi-user.target


----------below tree defines the structure of project-------------------------------------------------------------------------------------

├── deploy-dotnet-website.yml
├── inventory.yml
└── templates
    └── kestrel-service.conf.j2
    |__ apache-site.conf.j2
    
    
note:- if we define ip of instance in hosts file no need to create inventory file

---------------------------------------------------while running playbook rember to  decrypt secrets.yml by
below command and after playbook completion again encrypt secrets.yml ------------------------------------------------------------

ansible-vault decrypt secrets.yml

ansible-vault encrypt secrets.yml

















